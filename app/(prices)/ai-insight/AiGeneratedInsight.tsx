"use client";
import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { marked } from "marked";

import {
  Grid,
  Typography,
  Box,
  Paper,
  useTheme,
  useMediaQuery,
  Divider,
  Autocomplete,
  TextField,
  Button,
  Drawer,
} from "@mui/material";
import ToggleButton from "@mui/material/ToggleButton";
import ToggleButtonGroup, {
  toggleButtonGroupClasses,
} from "@mui/material/ToggleButtonGroup";
import { styled } from "@mui/material/styles";

import TuneRoundedIcon from "@mui/icons-material/TuneRounded";
import UnfoldMoreRoundedIcon from "@mui/icons-material/UnfoldMoreRounded";

import PremiumDialogContent from "@/components/dialogs/PremiumDialogContent";
import "./ai.css";

const StyledLanguageToggleButtonGroup = styled(ToggleButtonGroup)(
  ({ theme }) => ({
    [`& .${toggleButtonGroupClasses.grouped}`]: {
      margin: theme.spacing(0.5),
      border: 0,
      borderRadius: theme.shape.borderRadius,
      [`&.${toggleButtonGroupClasses.disabled}`]: {
        border: 0,
      },
    },
  })
);

const StyledLanguageToggleButton = styled(ToggleButton)(({ theme }) => ({
  "&.MuiToggleButtonGroup-grouped": {
    borderRadius: "5px !important",
    width: "75px",
    "&.Mui-selected": {
      color: theme.palette.background.default,
      backgroundColor: theme.palette.text.secondary,
    },
  },
  color: theme.palette.text.primary,
}));

const StyledToggleButtonGroup = styled(ToggleButtonGroup)(({ theme }) => ({
  [`& .${toggleButtonGroupClasses.grouped}`]: {
    border: 0,
  },
}));
const StyledToggleButton = styled(ToggleButton)(({ theme }) => ({
  "&.MuiToggleButtonGroup-grouped": {
    borderRadius: "5px !important",
    border: `1px solid lightgrey !important`,
    "&.Mui-selected": {
      color: theme.palette.background.default,
      backgroundColor: theme.palette.text.secondary,
    },
  },
  color: theme.palette.text.primary,
}));

const options: any = [
  {
    buttonText: "General info",
    buttonTextSmall: "Info",
    queryType: "general",
    dataTitle: "general",
  },
  {
    buttonText: "Fair value",
    buttonTextSmall: "Fair value",
    queryType: "fairValue",
    dataTitle: "fairValue",
  },
  {
    buttonText: "Strength",
    buttonTextSmall: "Strength",
    queryType: "strength",
    dataTitle: "fundamentalRatio",
  },
  {
    buttonText: "Weakness",
    buttonTextSmall: "Weakness",
    queryType: "weakness",
    dataTitle: "fundamentalRatio",
  },
  {
    buttonText: "Technical",
    buttonTextSmall: "Technical",
    queryType: "technical",
    dataTitle: "technical",
  },
  {
    buttonText: "Financial",
    buttonTextSmall: "Financial",
    queryType: "financial",
    dataTitle: "financial",
  },
];

const generalInfoEn: string =
  "<p>Welocme to AI based anlysis of the stocks!</p><p>The information presented here is generated by AI models based on actual data of stocks. Your caution is required before taking any action. Also these are merely insights and are not meant to be any direct investment suggestion.</p>";

const generalInfoBn: string =
  "<p>AI-ভিত্তিক স্টক বিশ্লেষণে স্বাগতম!</p><p>এখানে প্রদত্ত তথ্যগুলো AI মডেলের মাধ্যমে স্টকগুলোর প্রকৃত ডেটা ব্যবহার করে তৈরি করা হয়েছে। কোনো পদক্ষেপ নেওয়ার আগে অনুগ্রহ করে সতর্ক থাকুন। এগুলো শুধুমাত্র বিশ্লেষণ এবং সরাসরি বিনিয়োগের পরামর্শ নয়।</p>";

const initdata: any = {
  "": {
    general: {
      En: generalInfoEn,
      Bn: generalInfoBn,
    },
  },
};

export default function AiGeneratedInsight(props: any) {
  const { allStockList } = props;

  const theme = useTheme();

  const matchesMdUp = useMediaQuery(theme.breakpoints.up("md"));

  const auth = useSelector((state: any) => state.auth);

  const [data, setdata] = useState<any>(initdata);

  const [tradingCode, setTradingCode] = useState("");

  const [alignment, setAlignment] = useState("general");

  const [languageAlignment, setLanguageAlignment] = useState("En");

  const [doc, setDoc] = useState<any>();

  const [fontSelected, setFontSelected] = useState({
    size: ".875rem",
    family: "'Poppins', sans-serif",
  });

  const [openDrawer, setOpenDrawer] = React.useState(false);

  const toggleDrawer = (newOpen: boolean) => () => {
    setOpenDrawer(newOpen);
  };

  const handleAlignmentChange = (
    event: React.MouseEvent<HTMLElement>,
    newAlignment: string
  ) => {
    if (newAlignment !== null) {
      setAlignment(newAlignment);
    }
  };

  const handleLanguageAlignmentChange = (
    event: React.MouseEvent<HTMLElement>,
    newAlignment: string
  ) => {
    if (newAlignment !== null) {
      setLanguageAlignment(newAlignment);
    }
  };

  const handleSelectStock = (e: any, newvalue: any, reason: any) => {
    if (reason == "selectOption") {
      setTradingCode(newvalue);
    }
  };

  const getData = async (queryType: string, dataTitle: string) => {
    try {
      if (!doc) return;

      if (queryType === "general") {
        setdata((state: any) => {
          if (!state[tradingCode]) {
            state[tradingCode] = {};
          }
          state[tradingCode]["general"] = {
            En: generalInfoEn,
            Bn: generalInfoBn,
          };
          return state;
        });
        doc.getElementById("content").innerHTML = marked.parse(
          data[tradingCode][queryType][languageAlignment]
        );
      }

      if (
        data[tradingCode] &&
        data[tradingCode][queryType] &&
        data[tradingCode][queryType][languageAlignment]
      ) {
        doc.getElementById("content").innerHTML = marked.parse(
          data[tradingCode][queryType][languageAlignment]
        );
        // console.log(data[tradingCode][queryType][languageAlignment]);
        return;
      }

      doc.getElementById("content").innerHTML = marked.parse(
        "*Please wait... AI model is generating data...*"
      );

      const res: any = await fetch(
        `${process.env.NEXT_PUBLIC_BACKEND_URL}/api/ai/getInsight`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            tradingCode: tradingCode,
            queryType,
            dataTitle,
            dataField: queryType + languageAlignment,
            language: languageAlignment,
            isDataFeed: false,
            data: null,
          }),
        }
      );
      const apiRes = await res.json();

      if (res.ok) {
        setdata((state: any) => {
          // console.log(state);
          if (!state[tradingCode]) {
            state[tradingCode] = {};
          }
          if (!state[tradingCode][queryType]) {
            state[tradingCode][queryType] = {};
          }
          state[tradingCode][queryType][languageAlignment] = apiRes.content;

          state[tradingCode]["general"] = {
            En: generalInfoEn,
            Bn: generalInfoBn,
          };

          return state;
        });
        doc.getElementById("content").innerHTML = marked.parse(apiRes.content);
      } else {
        doc.getElementById("content").innerHTML = marked.parse(
          "Something went wrong"
        );
      }
    } catch (error) {
      if (doc) {
        doc.getElementById("content").innerHTML = marked.parse(
          "Something went wrong"
        );
      }
    }
  };

  // useEffect(() => {
  //   if (doc) {
  //     doc.getElementById("content").innerHTML = marked.parse(
  //       initdata[""]["general"]["En"]
  //     );
  //   }
  //   // console.log(initdata[""]["general"]["En"]);
  // }, [doc]);

  useEffect(() => {
    if (doc && alignment == "general") {
      doc.getElementById("content").innerHTML = marked.parse(
        initdata[""][alignment][languageAlignment]
      );
      setFontSelected({
        size: languageAlignment == "Bn" ? "1rem" : ".875rem",
        family:
          languageAlignment == "Bn"
            ? '"Noto Sans Bengali", sans-serif'
            : "'Poppins', sans-serif",
      });
    }
  }, [doc, languageAlignment]);

  useEffect(() => {
    if (window?.document) {
      setDoc(window.document);
    }
  }, []);

  const handleSubmit = (e: any) => {
    e.preventDefault();

    const { queryType, dataTitle } = options.find(
      (item: any) => item.queryType == alignment
    );

    getData(queryType, dataTitle);

    setFontSelected({
      size: languageAlignment == "Bn" ? "1rem" : ".875rem",
      family:
        languageAlignment == "Bn"
          ? '"Noto Sans Bengali", sans-serif'
          : "'Poppins', sans-serif",
    });

    setOpenDrawer(false);
  };

  // console.log(tradingCode, data);

  return (
    <Box>
      <Drawer anchor="bottom" open={openDrawer} onClose={toggleDrawer(false)}>
        <Box>
          <Box sx={{ px: 2, py: 1.5 }}>
            <Typography
              sx={{ fontWeight: 700, fontSize: "1.1rem", textAlign: "center" }}
            >
              Menu
            </Typography>
          </Box>
        </Box>
        <Divider />
        <Box
          component="form"
          onSubmit={handleSubmit}
          sx={{ maxWidth: 260, mx: "auto", px: 2, pt: 3, pb: 3 }}
        >
          <Box sx={{ mb: { xs: 3, md: 2 } }}>
            <Typography sx={{ color: "text.secondary", mb: { xs: 1, md: 1 } }}>
              Select language:
            </Typography>

            <Paper
              variant="outlined"
              sx={{
                width: 163,
                bgcolor: "inherit",
              }}
            >
              <StyledLanguageToggleButtonGroup
                // size="small"
                value={languageAlignment}
                exclusive
                onChange={handleLanguageAlignmentChange}
                aria-label="text alignment"
              >
                <StyledLanguageToggleButton
                  value="En"
                  sx={{ py: 0, fontWeight: 600 }}
                >
                  English
                </StyledLanguageToggleButton>
                <StyledLanguageToggleButton
                  value="Bn"
                  sx={{
                    py: 0,
                    fontFamily: '"Noto Sans Bengali", sans-serif',
                    fontSize: "1rem",
                    fontWeight: 600,
                  }}
                >
                  বাংলা
                </StyledLanguageToggleButton>
              </StyledLanguageToggleButtonGroup>
            </Paper>
          </Box>

          <Box sx={{ mb: { xs: 3, md: 2 } }}>
            <Typography sx={{ color: "text.secondary", mb: { xs: 1, md: 1 } }}>
              Select stock:
            </Typography>
            <Autocomplete
              size="small"
              onChange={handleSelectStock}
              options={allStockList.sort()}
              value={tradingCode}
              renderInput={(params) => (
                <TextField {...params} placeholder="Select stock" required />
              )}
              sx={{ width: { xs: 200, md: "100%" } }}
            />
          </Box>

          <Box>
            <Typography
              sx={{ color: "text.secondary", mb: { xs: 1.3, md: 1.5 } }}
            >
              Select analysis type:
            </Typography>
            <StyledToggleButtonGroup
              size="small"
              value={alignment}
              exclusive
              onChange={handleAlignmentChange}
              orientation={matchesMdUp ? "vertical" : "horizontal"}
              sx={{
                display: "flex",
                flexWrap: "wrap",
                justifyContent: "flex-start",
                alignItems: "flex-start",
              }}
            >
              {options
                .filter((item: any) => item.queryType != "general")
                .map((item: any, index: number) => (
                  <StyledToggleButton
                    key={index}
                    value={item.queryType}
                    sx={{
                      px: { xs: 1.5, md: 2 },
                      py: { xs: 0.5, md: 0.6 },
                      mb: { xs: 1.3, md: 1.3 },
                      mr: { xs: 1.5, md: 0 },
                      width: { xs: "inherit", md: "100%" },
                      fontSize: { xs: ".85rem", md: ".9rem" },
                    }}
                  >
                    {matchesMdUp ? item.buttonText : item.buttonTextSmall}
                  </StyledToggleButton>
                ))}
            </StyledToggleButtonGroup>
          </Box>

          <Box
            sx={{
              display: "flex",
              alignItems: "center",
              gap: 1.5,
              mt: { xs: 2, md: 1.5 },
              mb: { xs: 2, md: 0 },
            }}
          >
            <Button
              variant="outlined"
              sx={{ px: 2.5 }}
              onClick={toggleDrawer(false)}
            >
              Cancel
            </Button>
            <Button variant="contained" sx={{ px: 2.5 }} type="submit">
              Submit
            </Button>
          </Box>
        </Box>
      </Drawer>

      <Box
        sx={{
          maxWidth: 700,
          mx: "auto",
          py: 2,
          display: auth?.isPremiumEligible ? "none" : "block",
        }}
      >
        <PremiumDialogContent variant="outlined" />
      </Box>
      <Box
        sx={{
          maxWidth: 650,
          mx: "auto",
          pl: { xs: 2, md: 5 },
          pr: { xs: 2, md: 5 },
          pb: { xs: 3, md: 5 },
          pt: { xs: 2, md: 5 },
          borderRadius: { xs: 0, md: 2 },
          display: auth?.isPremiumEligible ? "block" : "none",
        }}
      >
        <Box>
          <Button
            variant="outlined"
            fullWidth
            startIcon={<UnfoldMoreRoundedIcon />}
            onClick={toggleDrawer(true)}
            sx={{ borderRadius: 6 }}
          >
            Show options
          </Button>
        </Box>

        <Paper
          elevation={0}
          sx={{
            mt: 2,
            borderRadius: 2,
            minHeight: { xs: 300, md: 480 },
            bgcolor: "appCardBgColor",
          }}
        >
          <Box sx={{ px: { xs: 2, md: 3 }, py: 2 }}>
            <Typography sx={{ fontSize: "1.3rem", fontWeight: 700 }}>
              AI Based Stock Insight
            </Typography>
          </Box>
          <Divider light />
          <Box
            id="content"
            sx={{
              px: { xs: 2, md: 3 },
              pt: 2,
              pb: 2,
              fontSize: fontSelected.size,
              fontFamily: fontSelected.family,
            }}
          ></Box>
        </Paper>
      </Box>
    </Box>
  );
}
