"use client";
import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { marked } from "marked";

import {
  Grid,
  Typography,
  Box,
  Paper,
  useTheme,
  useMediaQuery,
  Divider,
  Autocomplete,
  TextField,
} from "@mui/material";
import ToggleButton from "@mui/material/ToggleButton";
import ToggleButtonGroup, {
  toggleButtonGroupClasses,
} from "@mui/material/ToggleButtonGroup";
import { styled } from "@mui/material/styles";

import PremiumDialogContent from "@/components/dialogs/PremiumDialogContent";
import "./ai.css";
import { grey } from "@mui/material/colors";

// import LanguageRoundedIcon from "@mui/icons-material/LanguageRounded";

const StyledLanguageToggleButtonGroup = styled(ToggleButtonGroup)(
  ({ theme }) => ({
    [`& .${toggleButtonGroupClasses.grouped}`]: {
      margin: theme.spacing(0.5),
      border: 0,
    },
  })
);

const StyledLanguageToggleButton = styled(ToggleButton)(({ theme }) => ({
  "&.MuiToggleButtonGroup-grouped": {
    borderRadius: "24px !important",
    "&.Mui-selected": {
      color: grey[50],
      backgroundColor: theme.palette.primary.main,
    },
  },
  color: theme.palette.text.primary,
}));

const StyledToggleButtonGroup = styled(ToggleButtonGroup)(({ theme }) => ({
  [`& .${toggleButtonGroupClasses.grouped}`]: {
    border: 0,
  },
}));

const StyledToggleButton = styled(ToggleButton)(({ theme }) => ({
  "&.MuiToggleButtonGroup-grouped": {
    width: "100px",
    borderRadius: "4px !important",
    border: `1px solid lightgrey !important`,
    whiteSpace: "nowrap",
    "&.Mui-selected": {
      color: theme.palette.background.default,
      backgroundColor: theme.palette.text.secondary,
    },
  },
  color: theme.palette.text.primary,
}));

const options: any = [
  {
    buttonText: "General info",
    buttonTextSmall: "Info",
    queryType: "general",
    dataTitle: "general",
  },
  {
    buttonText: "Fair value",
    buttonTextSmall: "Fair value",
    queryType: "fairValue",
    dataTitle: "fairValue",
  },
  {
    buttonText: "Strength",
    buttonTextSmall: "Strength",
    queryType: "strength",
    dataTitle: "fundamentalRatio",
  },
  {
    buttonText: "Weakness",
    buttonTextSmall: "Weakness",
    queryType: "weakness",
    dataTitle: "fundamentalRatio",
  },
  {
    buttonText: "Technical",
    buttonTextSmall: "Technical",
    queryType: "technical",
    dataTitle: "technical",
  },
  {
    buttonText: "Financial",
    buttonTextSmall: "Financial",
    queryType: "financial",
    dataTitle: "financial",
  },
];

const initdata: any = {
  general: {
    En: "<p>Welocme to AI based anlysis of the stocks!</p><p>The information presented here is generated by AI models based on actual data of stocks. Your caution is required before taking any action. Also these are merely insights and are not meant to be any direct investment suggestion.</p>",
    Bn: "<p>AI-ভিত্তিক স্টক বিশ্লেষণে স্বাগতম!</p><p>এখানে প্রদত্ত তথ্যগুলো AI মডেলের মাধ্যমে স্টকগুলোর প্রকৃত ডেটা ব্যবহার করে তৈরি করা হয়েছে। কোনো পদক্ষেপ নেওয়ার আগে অনুগ্রহ করে সতর্ক থাকুন। এগুলো শুধুমাত্র বিশ্লেষণ এবং সরাসরি বিনিয়োগের পরামর্শ নয়।</p>",
  },
  strength: { En: null, Bn: null },
  weakness: { En: null, Bn: null },
  technical: { En: null, Bn: null },
  financial: { En: null, Bn: null },
  fairValue: { En: null, Bn: null },
};

export default function AiGeneratedInsight(props: any) {
  const {
    technicals,
    fundamentals,
    epsCurrent,
    pe,
    pbv,
    pcf,
    cashDividend,
    price,
    tradingCode,
  } = props;

  const theme = useTheme();

  const targetRef: any = React.useRef(null);

  const matchesMdUp = useMediaQuery(theme.breakpoints.up("md"));

  const auth = useSelector((state: any) => state.auth);

  const [data, setdata] = useState<any>(initdata);

  const [alignment, setAlignment] = useState("general");

  const [languageAlignment, setLanguageAlignment] = useState("En");

  const [doc, setDoc] = useState<any>();

  const handleAlignmentChange = (
    event: React.MouseEvent<HTMLElement>,
    newAlignment: string
  ) => {
    if (newAlignment !== null) {
      setAlignment(newAlignment);
    }
  };

  const handleLanguageAlignmentChange = (
    event: React.MouseEvent<HTMLElement>,
    newAlignment: string
  ) => {
    if (newAlignment !== null) {
      setLanguageAlignment(newAlignment);
    }
  };

  const getQueryDataBody = () => {
    return {
      technical: {
        supportAndResistance: technicals?.pivots,
        oscillators: technicals?.oscillators,
        movingAverages: technicals?.movingAverages,
        candlestick: technicals?.candlestick?.value,
        betaOneYear: technicals?.beta,
        currency: "BDT",
      },
      fundamentalRatio: {
        priceToEarningRatio: pe?.toFixed(2),
        earningsPerShare: epsCurrent?.toFixed(2),
        NetAssetValue: fundamentals?.navQuarterly?.value?.toFixed(2),
        priceToBookValueRatio: pbv?.toFixed(2),
        priceToSalesRatio: fundamentals?.ps?.value?.toFixed(2),
        debtToEquityRatio: fundamentals?.de?.value?.toFixed(2),
        returnOfEquity: fundamentals?.roe?.value?.toFixed(2),
        returnOfAssets: fundamentals?.roa?.value?.toFixed(2),
        dividendYield: fundamentals?.dividendYield?.value?.toFixed(2),
        currentRatio: fundamentals?.currentRatio?.value?.toFixed(2),
        netIncomeRatio: fundamentals?.netIncomeRatio?.value?.toFixed(2),
        NetOperatingCashFlowPerShare:
          fundamentals?.nocfpsQuarterly?.value?.toFixed(2),
        currency: "BDT",
      },
      financial: {
        totalAsset: fundamentals?.totalAsset?.value,
        revenue: fundamentals?.revenue?.value,
        netIncome: fundamentals?.netIncome?.value,
        reserveAndSurplus: fundamentals?.reserveSurplus?.value * 1000000,
        bookValue: fundamentals?.bookValue?.value,
        totalLiabilities: fundamentals?.totalLiabilities?.value,
        earningBeforeInterestAndTaxes: fundamentals?.ebit?.value,
        operatingProfit: fundamentals?.operatingProfit?.value,
        currency: "BDT",
      },
      fairValue: {
        dividendInPercentage: cashDividend,
        priceToCashFlowRatio: pcf?.toFixed(2),
        NetOperatingCashFlowPerShare:
          fundamentals?.nocfpsQuarterly?.value?.toFixed(2),
        currentPrice: price,
        currency: "BDT",
      },
    };
  };

  const getData = async (queryType: string, dataTitle: string) => {
    try {
      if (!doc) return;

      if (data[queryType][languageAlignment]) {
        doc.getElementById("content").innerHTML = marked.parse(
          data[queryType][languageAlignment]
        );
        return;
      }

      doc.getElementById("content").innerHTML = marked.parse(
        `*Please wait...<br/><br/>
        AI model is generating data...*`
      );

      const queryBody: any = getQueryDataBody();

      const res: any = await fetch(
        `${process.env.NEXT_PUBLIC_BACKEND_URL}/api/ai/getInsight`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            tradingCode: tradingCode,
            queryType,
            dataTitle,
            dataField: queryType + languageAlignment,
            language: languageAlignment,
            isDataFeed: true,
            data: queryBody[dataTitle],
          }),
        }
      );
      const apiRes = await res.json();

      if (res.ok) {
        setdata((state: any) => ({
          ...state,
          [queryType]: {
            ...state[queryType],
            [languageAlignment]: apiRes.content,
          },
        }));
        doc.getElementById("content").innerHTML = marked.parse(apiRes.content);
      } else {
        doc.getElementById("content").innerHTML = marked.parse(
          "Something went wrong"
        );
      }
    } catch (error) {
      if (doc) {
        doc.getElementById("content").innerHTML = marked.parse(
          "Something went wrong"
        );
      }
    }
  };

  useEffect(() => {
    const { queryType, dataTitle } = options.find(
      (item: any) => item.queryType == alignment
    );
    getData(queryType, dataTitle);
  }, [alignment, languageAlignment]);

  useEffect(() => {
    if (doc) {
      doc.getElementById("content").innerHTML = marked.parse(
        initdata["general"]["En"]
      );
    }
  }, [doc]);

  useEffect(() => {
    if (targetRef.current) {
      targetRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [targetRef]);

  useEffect(() => {
    if (window?.document) {
      setDoc(window.document);
    }
  }, []);

  return (
    <Box sx={{ pt: { xs: 0, md: 2 }, pb: { xs: 0, md: 2 }, width: "100%" }}>
      {!auth?.isPremiumEligible && (
        <Box
          sx={{
            pt: 3,
            pb: 3,
            px: 2,
          }}
        >
          <PremiumDialogContent details={false} />
        </Box>
      )}
      {auth?.isPremiumEligible && (
        <Box
          sx={{
            maxWidth: 650,
            mx: "auto",
            pl: { xs: 2, md: 4 },
            pr: { xs: 2, md: 4 },
            pb: { xs: 1, md: 3 },
            pt: { xs: 1, md: 4 },
            borderRadius: { xs: 0, md: 2 },
          }}
        >
          <Box sx={{ mb: { xs: 1.5, md: 3 } }}>
            {/* <Typography
                  sx={{ color: "text.secondary", mb: { xs: 1, md: 1 } }}
                >
                  Select language:
                </Typography> */}
          </Box>

          <Box>
            {/* <Typography
                  sx={{ color: "text.secondary", mb: { xs: 1, md: 1.3 } }}
                >
                  Select analysis type:
                </Typography> */}
            <StyledToggleButtonGroup
              size="small"
              value={alignment}
              exclusive
              onChange={handleAlignmentChange}
              orientation={matchesMdUp ? "vertical" : "horizontal"}
              sx={{
                display: "flex",
                flexWrap: "wrap",
                justifyContent: "flex-start",
                alignItems: "flex-start",
              }}
            >
              {options
                .filter((item: any) => item.queryType != "general")
                .map((item: any, index: number) => (
                  <StyledToggleButton
                    key={index}
                    value={item.queryType}
                    sx={{
                      // px: { xs: 1.5, md: 2 },
                      py: { xs: 0.3, md: 0.7 },
                      mb: { xs: 1, md: 1.5 },
                      mr: { xs: 1, md: 0 },
                      width: { xs: "inherit", md: "100%" },
                      fontSize: { xs: ".85rem", md: ".9rem" },
                    }}
                  >
                    {matchesMdUp ? item.buttonText : item.buttonTextSmall}
                  </StyledToggleButton>
                ))}
            </StyledToggleButtonGroup>
          </Box>

          <Paper
            elevation={0}
            sx={{
              mt: { xs: 1.3, md: 0 },
              mb: 2,
              borderRadius: 1.5,
              minHeight: { xs: 300, md: 354 },
              bgcolor: "appCardBgColor",
            }}
          >
            <Box
              sx={{
                px: { xs: 1.5, md: 3 },
                py: 1.5,
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
              }}
            >
              <Typography sx={{ fontSize: "1.3rem", fontWeight: 700 }}>
                AI Based Insight
              </Typography>

              <Box
                sx={{
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  gap: 0.6,
                }}
              >
                {/* <LanguageRoundedIcon /> */}
                <Paper
                  variant="outlined"
                  sx={{
                    bgcolor: "priceCardBgColor",
                    borderRadius: 9,
                    // border: `.5px solid ${theme.palette.primary.main}`,
                  }}
                >
                  <StyledLanguageToggleButtonGroup
                    value={languageAlignment}
                    exclusive
                    onChange={handleLanguageAlignmentChange}
                    aria-label="text alignment"
                  >
                    <StyledLanguageToggleButton
                      value="En"
                      sx={{
                        py: 0,
                        px: 1.2,
                        fontWeight: 600,
                        fontSize: ".875rem",
                      }}
                    >
                      ENG
                    </StyledLanguageToggleButton>
                    <StyledLanguageToggleButton
                      value="Bn"
                      sx={{
                        py: 0,
                        px: 1,
                        fontFamily: '"Noto Sans Bengali", sans-serif',
                        fontWeight: 700,
                        fontSize: ".95rem",
                      }}
                    >
                      বাংলা
                    </StyledLanguageToggleButton>
                  </StyledLanguageToggleButtonGroup>
                </Paper>
              </Box>
            </Box>
            <Divider light />
            <Box
              id="content"
              sx={{
                px: { xs: 1.5, md: 3 },
                pt: 2,
                pb: 2,
                color: "text.primary",
                fontSize: languageAlignment == "Bn" ? "1rem" : ".875rem",
                fontFamily:
                  languageAlignment == "Bn"
                    ? '"Noto Sans Bengali", sans-serif'
                    : "'Poppins', sans-serif",
              }}
            ></Box>
          </Paper>
        </Box>
      )}
      <Box ref={targetRef}></Box>
    </Box>
  );
}
